### .dein_lazy.toml

### edit
[[plugins]]
repo = 'Shougo/deoplete.nvim'
hook_source = '''
  let g:deoplete#enable_at_startup = 1
  imap <expr><C-l>
  \ neosnippet#expandable() <Bar><Bar> neosnippet#jumpable() ?
  \ "\<Plug>(neosnippet_expand_or_jump)" : "\<C-n>"
'''
on_event = 'InsertCharPre'
# NOTE: require python version 3.6+

[[plugins]]
repo = 'Shougo/neosnippet'
hook_source = '''
  imap <C-l> <Plug>(neosnippet_expand_or_jump)
  smap <C-l> <Plug>(neosnippet_expand_or_jump)
  xmap <C-l> <Plug>(neosnippet_expand_target)
  if has('conceal')
    set conceallevel=2 concealcursor=niv
  endif
  let g:neosnippet#snippets_directory = '~/usr/doc/snippets/'
'''
on_event = 'InsertCharPre'
on_ft = ['snippet']
depends = ['neosnippet-snippets']

[[plugins]]
repo = 'deoplete-plugins/deoplete-clang'
on_ft = ['c','cpp','objc','objcpp']
hook_add = '''
  let g:deoplete#sources#clang#libclang_path = '/Library/Developer/CommandLineTools/usr/lib/libclang.dylib'
  let g:deoplete#sources#clang#clang_header = '/Library/Developer/CommandLineTools/usr/lib/clang'
'''

[[plugins]]
repo = 'deoplete-plugins/deoplete-go'
build = 'make'
on_ft = 'go'

[[plugins]]                          
repo = 'padawan-php/deoplete-padawan'
on_ft = 'php'                        

[[plugins]]                 
repo = 'Shougo/deoplete-rct'
on_ft = 'ruby'              

### filetype
[[plugins]]
repo = 'mechatroner/rainbow_csv'
on_ft = 'csv'

### debug
[[plugins]]
repo = 'vim-vdebug/vdebug'
on_ft = ['javascript','perl','php','python','ruby']
hook_add = '''
  nnoremap [vdb] <Nop>
  nmap <Space>d [vdb]
  nnoremap <silent> [vdb]l :BreakpointWindow<CR>
  nnoremap <silent> [vdb]q :BreakpointRemove *<CR>
  let g:vdebug_keymap = {
  \  'run' : '<C-n>',
  \  'run_to_cursor' : '<C-m>',
  \  'step_over' : '[vdb]n',
  \  'step_into' : '[vdb]i',
  \  'step_out' : '[vdb]N',
  \  'set_breakpoint' : '<Space>m',
  \  'eval_under_cursor' : '[vdb]e',
  \  'detach' : '[vdb]c',
  \  'close' : '[vdb]C',
  \}
  let g:vdebug_options = {
  \    'port' : 9000,
  \    'timeout' : 20,
  \    'server' : '',
  \    'on_close' : 'detach',
  \    'break_on_open' : 0,
  \    'ide_key' : '',
  \    'debug_window_level' : 0,
  \    'debug_file_level' : 0,
  \    'debug_file' : '',
  \    'path_maps' : {"":""},
  \    'watch_window_style' : 'expanded',
  \    'marker_default' : '⬦',
  \    'marker_closed_tree' : '▸',
  \    'marker_open_tree' : '▾',
  \    'sign_breakpoint' : '▷',
  \    'sign_current' : '▶',
  \    'continuous_mode'  : 1
  \}
'''
# for remote debugging -> {path_maps(remote:local)}

[[plugins]]
repo = 'sakhnik/nvim-gdb'
on_ft = ['c','cpp','objc','objcpp']

### utility
[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
  let g:quickrun_config = {
  \ "runner" : "vimproc",
  \ "runner/vimproc/updatetime" : 60,
  \	"_" : {
  \  "outputter/buffer/split" : ":botright",
  \  "outputter/error/success" : "buffer",
  \  "outputter/error/error/" : "quickfix",
  \  "outputter/buffer/into" : "1",
  \  "outputter/quickfix/errorformat" : "%f:%l,%m in %f on line %l",
  \  "outputter/buffer/close_on_empty" : 1,
  \  "outputter" : "error"
  \  }
  \}
  let g:quickrun_config['cs']  = {
  \ 'command' : 'mcs',
  \ 'exec' : ['%c %o %s:p > /dev/null', 'mono %s:p:r.exe', 'rm %s:p:r.exe'],
  \ 'cmdopt' : '-warn:4',
  \ 'quickfix/errorformat' : '%f\\(%l\\,%c\\):\ error\ CS%n:\ %m',
  \}
  let g:quickrun_no_default_key_mappings = 1
  nnoremap <Leader>e :QuickRun -mode n<CR>
  xnoremap <Leader>e :QuickRun -mode v<CR>
  nnoremap <expr><silent> <C-c> quickrun#is_running() ? quickrun#sweep_sessions() : "\<C-c>"
  au FileType qf nnoremap <silent><buffer>q :quit<CR>
'''

